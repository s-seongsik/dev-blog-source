I"
m<h2 id="시작으로"><strong>시작으로</strong></h2>

<hr />

<p><code class="language-plaintext highlighter-rouge">라우팅(Routing)</code>이란 애플리케이션 엔드 포인트(URI)의 정의 및 특정한 <code class="language-plaintext highlighter-rouge">HTTP</code> 요청 방식(<code class="language-plaintext highlighter-rouge">GET</code>, <code class="language-plaintext highlighter-rouge">POST</code> 등)에 대한 클라이언트의 요청에 따라 응답하는 방법을 결정하는 것이다.
각 라우트는 하나 이상의 핸들러 함수를 가질 수 있으며, 이러한 함수는 라우트가 일치할 경우 실행된다.</p>

<p>만약 다수의 핸들러 함수를 지정하려면 함수 로직 끝에 <code class="language-plaintext highlighter-rouge">next()</code>를 붙여야 한다. 그래야 다음 함수로 넘어가기 때문이다.</p>

<p><br /></p>

<h2 id="http-요청-방식"><strong>HTTP 요청 방식</strong></h2>

<hr />

<p>다양한 요청 방식이 존재하지만 보통 REST API를 구현할 때 4가지만 알아도 충분하다.<br />
보통 개발할 때 CRUD기준으로 메소드를 사용한다.</p>
<ul>
  <li>GET (READ)</li>
  <li>POST (CREATE)</li>
  <li>PUT (UPDATE)</li>
  <li>DELETE (DELETE)</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">HTTP</code> 메소드는 동사 역할을한다. 그리고 동사에 대한 목적어가 바로 <code class="language-plaintext highlighter-rouge">엔드 포인트(URI)</code>이다.</p>

<p>간단한 예시:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">(GET)</code> localhost:port/users - 유저정보를 조회를 요청</li>
  <li><code class="language-plaintext highlighter-rouge">(POST)</code> localhost:port/users - 유저정보를 생성을 요청</li>
  <li><code class="language-plaintext highlighter-rouge">(PUT)</code> localhost:port/users/:user_id - user_id 유저의 정보 수정을 요청</li>
  <li><code class="language-plaintext highlighter-rouge">(DELETE)</code> localhost:port/users/:user_id - user_id 유저의 정보 삭제를 요청</li>
</ul>

<p><br /></p>

<h2 id="라우팅-정의"><strong>라우팅 정의</strong></h2>

<hr />

<p>기본적인 라우트 정의 구조는 아래와 같다.</p>

<p><code class="language-plaintext highlighter-rouge">app.METHOD(PATH, HANDLER)</code></p>

<p>아래 코드는 아주 기본적인 라우트의 예시이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>


<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<h3 id="라우트-메소드"><strong>라우트 메소드</strong></h3>

<p>여기서 app은 Express의 인스턴스를 담은 변수이다. Express는 HTTP 메소드를 가지고 있다.</p>

<ul>
  <li>GET : app.get()</li>
  <li>POST : app.post()</li>
  <li>PUT : app.put()</li>
  <li>DELETE : app.delete()</li>
</ul>

<p>Express는 다음과 같은 라우팅 메소드를 제공한다.</p>
<blockquote>
  <p>get, post, put, head, delete, options, trace, copy, lock, mkcol, move, purge, propfind, proppatch, unlock, report, mkactivity, checkout, merge, m-search, notify, subscribe, unsubscribe, patch, search 및 connect.</p>
</blockquote>

<p><br /></p>

<h2 id="라우트-경로"><strong>라우트 경로</strong></h2>

<hr />

<p>라우트 경로는, 요청 메소드와 조합을 통해 요청이 이루어질 수 있는 <code class="language-plaintext highlighter-rouge">엔드포인트(URI)</code>를 정의한다. 라우트 경로는 문자열, 문자열 패턴 또는 정규식으로 작성할 수 있다.</p>

<p><strong>문자열을 기반으로 작성한 라우트 경로 예시 :</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 라우트 경로 /</span>
<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">root</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 라우트 경로 /users</span>
<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/users</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">users</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 라우트 경로 /random.text</span>
<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/random.text</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">random.text</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>문자열 패턴을 기반으로 작성한 라우트 경로 예시 :</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 라우트 경로 /acd 및 /abcd</span>
<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/ab?cd</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">ab?cd</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 라우트 경로 /abcd, /abbcd 및 /abbbcd </span>
<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/ab+cd</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">ab+cd</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 라우트 경로 /abcd, /abxcd, /abRABDOMcd 및 /ab123cd </span>
<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/ab*cd</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">ab*cd</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 라우트 경로 /abe 및 /abcde</span>
<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/ab(cd)?e</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
 <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">ab(cd)?e</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>정규식을 기반으로 작성한 라우트 경로 예시 :</strong></p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 라우트 이름에 “a”가 포함된 모든 항목</span>
<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="sr">/a/</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">/a/</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 라우트 경로는 butterfly 및 dragonfly와 일치하지만</span>
<span class="c1">// butterflyman 및 dragonfly man 등과 일치하지 않는다.</span>
<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="sr">/.*fly$/</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">/.*fly$/</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="응답-메소드"><strong>응답 메소드</strong></h2>

<hr />

<p>밑의 표에 표시된 응답 오브젝트에 대한 메소드(res)는 응답을 클라이언트로 전송하고 요청-응답 주기를 종료할 수 있다.<br />
만약 라우트 핸드러부터 다음 메소드 중 어느 하나도 호출되지 않는 경우, 클라이언트 요청은 정지된 채로 방치된다.</p>

<p>그 이유는 HTTP 방식은 동기 방식이므로 요청이 있으면 응답이 반드시 있어야 하기 때문이다.</p>

<p><a href="https://expressjs.com/ko/4x/api.html#res.download">공식 문서</a>에 자세히 설명되어 있으니 참고하자.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">메소드</th>
      <th style="text-align: left">설명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">res.download()</td>
      <td style="text-align: left">파일이 다운로드되도록 프롬프트 한다.</td>
    </tr>
    <tr>
      <td style="text-align: left">res.end()</td>
      <td style="text-align: left">응답 프로세스를 종료한다.</td>
    </tr>
    <tr>
      <td style="text-align: left">res.json()</td>
      <td style="text-align: left">JSON 응답을 전송한다.</td>
    </tr>
    <tr>
      <td style="text-align: left">res.jsonp()</td>
      <td style="text-align: left">JSONP 지원을 통해 JSON 응답을 전송합니다.</td>
    </tr>
    <tr>
      <td style="text-align: left">res.redirect()</td>
      <td style="text-align: left">요청의 경로를 재지정합니다.</td>
    </tr>
    <tr>
      <td style="text-align: left">res.render()</td>
      <td style="text-align: left">보기 템플리트를 렌더링합니다.</td>
    </tr>
    <tr>
      <td style="text-align: left">res.send()</td>
      <td style="text-align: left">다양한 유형의 응답을 전송합니다.</td>
    </tr>
    <tr>
      <td style="text-align: left">res.sendFile()</td>
      <td style="text-align: left">파일을 옥텟 스트림의 형태로 전송합니다.</td>
    </tr>
    <tr>
      <td style="text-align: left">res.sendStatus()</td>
      <td style="text-align: left">응답 상태 코드를 설정한 후 해당 코드를 문자열로 표현한 내용을 응답 본문으로서 전송합니다.</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<h2 id="approute"><strong>app.route()</strong></h2>

<hr />

<p><code class="language-plaintext highlighter-rouge">app.route()</code>을 이용하면 라우트 경로에 대하여 체인 가능한 라우트 핸드러를 작성할 수 있다.<br />
경로는 한 곳에 지정되어 있으므로 모듈식 라우트를 작성하면 중복성과 오타가 감소하여 도움이 된다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">route</span><span class="p">(</span><span class="dl">'</span><span class="s1">/book</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Get a random book</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Add a book</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">})</span>
  <span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">Update the book</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">});</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="라우팅-모듈화"><strong>라우팅 모듈화</strong></h2>

<hr />

<p>라우트 정의가 몇개 없다면 상관없지만, 서비스 및 기능별로 제공하는 라우트가 많다면 한 곳에 관리하기 어렵다.
또한, 중복되는 자원들이 많다면 어떨까? 그럴 땐 모듈화로 나누어 관리하는 것이 좋다.</p>

<p><code class="language-plaintext highlighter-rouge">express.Router</code> 클래스를 사용하면 모듈식 마운팅이 가능한 핸들러를 작성할 수 있다. Router 인스턴스는 인스턴스는 완전한 미들웨어이자 라우팅 시스템이다.
이것을 <code class="language-plaintext highlighter-rouge">"미니 앱(mini-app)"</code> 이라고도 불린다.</p>

<p>자 밑의 라우트 정의들이 있다고 가정해보자.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/users</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">get users</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/users/:id</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">get a user</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/users</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
   <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">post user</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="dl">'</span><span class="s1">/users/:id</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">put a user</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="dl">'</span><span class="s1">/users/:id</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">delete a user</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>중복되는 <code class="language-plaintext highlighter-rouge">users</code> 경로를 모두 명시할 필요 없이 <code class="language-plaintext highlighter-rouge">/users</code>로 모듈화를 해보자.</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">/route</code>폴더에 <code class="language-plaintext highlighter-rouge">users</code> 폴더를 생성하고 안에 <code class="language-plaintext highlighter-rouge">index.js</code>를 생성한다.</li>
  <li>그리고 아래와 같이 작성하면 express는 <code class="language-plaintext highlighter-rouge">/route폴더</code> 밑에 생성한 <code class="language-plaintext highlighter-rouge">users</code>를 공통 라우터로 사용할 수 있다.</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">express</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">var</span> <span class="nx">router</span> <span class="o">=</span> <span class="nx">express</span><span class="p">.</span><span class="nx">Router</span><span class="p">()</span>

<span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">get users</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">router</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/:id</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">get a user</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">router</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
   <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">post user</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">router</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="dl">'</span><span class="s1">/:id</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">put a user</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">router</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="dl">'</span><span class="s1">/:id</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="dl">'</span><span class="s1">delete a user</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">router</span>
</code></pre></div></div>

<ol>
  <li>모듈화된 라우터를 app.js에 import하여 <code class="language-plaintext highlighter-rouge">app.use()</code>에 등록만하면 된다.</li>
</ol>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app.js</span>
<span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
<span class="kd">var</span> <span class="nx">usersRouter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">./router/users</span><span class="dl">'</span><span class="p">);</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="dl">'</span><span class="s1">/users</span><span class="dl">'</span><span class="p">,</span> <span class="nx">usersRouter</span><span class="p">);</span>
</code></pre></div></div>
:ET