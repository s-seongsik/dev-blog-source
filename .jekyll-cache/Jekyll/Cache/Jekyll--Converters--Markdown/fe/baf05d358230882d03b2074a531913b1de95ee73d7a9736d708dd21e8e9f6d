I"r-<h2 id="시작으로"><strong>시작으로</strong></h2>

<hr />

<p>예전에 <code class="language-plaintext highlighter-rouge">FastAPI</code> 서버를 <code class="language-plaintext highlighter-rouge">Docker</code>에 배포한 경험이 있다. 하지만 <code class="language-plaintext highlighter-rouge">Node.js</code> 서버를 <code class="language-plaintext highlighter-rouge">Docker</code>에 다시 배포하려고 하니 기억이 가물가물 했다.
역시 정리하는 것보다 다시 찾는게 더 귀찮은 일이다…</p>

<p>그래서, 핵심만 정리하여 지식으로 남긴다.</p>

<h3 id="사전-필수-준비물"><strong>사전 필수 준비물</strong></h3>
<ul>
  <li>카카오 클라우드 ubuntu 18.04</li>
  <li>docker 설치완료</li>
  <li>포트 포워딩 (외부-&gt;내부로 접속해야 하므로)</li>
  <li>배포 할 app</li>
</ul>

<p>위의 필수 준비는 끝냈다는 가정하에 시작하겠다.</p>

<p><br /></p>

<h2 id="dockerfile이란"><strong>Dockerfile이란?</strong></h2>

<hr />

<ul>
  <li><code class="language-plaintext highlighter-rouge">Dockerfile</code>은 <code class="language-plaintext highlighter-rouge">docker</code> 이미지를 생성하기 위한 설정 파일이다.</li>
  <li><code class="language-plaintext highlighter-rouge">Dockerfile</code>안에 작성된 명령어를 기반으로 빌드한다.</li>
  <li><code class="language-plaintext highlighter-rouge">Dockerfile</code>에 작성된 명령어들을 차례대로 수행하여 <code class="language-plaintext highlighter-rouge">docker</code> 이미지를 생성한다.</li>
  <li><code class="language-plaintext highlighter-rouge">Dockerfile</code>은 이미지가 어떻게 구성되어있는지 알 수 있다.</li>
</ul>

<p><br /></p>

<h2 id="dockerfile-왜-사용할까"><strong>Dockerfile 왜 사용할까?</strong></h2>

<hr />

<h3 id="이미지가-어떻게-구성되어-있는지-알-수-있다"><strong>이미지가 어떻게 구성되어 있는지 알 수 있다.</strong></h3>
<p>완성된 도커 이미지를 가져다 쓰는 경우에는 알 필요가 없지만, 완성된 애플리케이션을 도커 이미지에 담기 위해서는 환경설정부터 디렉토리 구조 및 명령어들을 하나하나 신경써서 작성해야 한다.
도커 이미지라는게 결국 가상의 서버환경이다. 실제 서버에 배포해야 될 과정을 이미지에 담는 것이다.
이는, <code class="language-plaintext highlighter-rouge">Dockerfile</code>은 자동화된 스크립트 형태이기 때문이다.</p>

<h3 id="배포가-용이하다"><strong>배포가 용이하다</strong></h3>
<p>어떠한 이미지를 배포할 때, 몇 기가씩이나 되는 이미지 파일 자체를 배포하기보다는 그 이미지를 만들 수 있는 스크립트인 <code class="language-plaintext highlighter-rouge">Dockerfile</code>만을 배포한다면 매우 편리할 것이다.
<code class="language-plaintext highlighter-rouge">Dockerfile</code>을 실행시키기만 하면 알아서 <code class="language-plaintext highlighter-rouge">Dockerfile</code>에 해당하는 이미지를 생성해준다.</p>

<h3 id="컨테이너이미지가-특정-행동을-수행하도록-한다"><strong>컨테이너(이미지)가 특정 행동을 수행하도록 한다.</strong></h3>
<p>컨테이너 환경에서 애플리케이션을 개발하다 보면, 특정 행동을 취하도록 하는 컨테이너를(이미지를) 만들어야 할 때가 있다. 이를 <code class="language-plaintext highlighter-rouge">Dockerfile</code>로 작성하면 간단하게 작성할 수 있다.</p>

<p><br /></p>

<h1 id="dockerfile-작성-방법"><strong>Dockerfile 작성 방법</strong></h1>

<hr />

<ul>
  <li>파일명은 “Dockerfile”로 작성해야 한다.</li>
  <li>Dockerfile 작성 내용이 아래와 같이 작성하겠다고 가정하자.</li>
</ul>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">FROM node:16

WORKDIR /home/workspace

COPY . ./

RUN npm install

EXPOSE 3000
CMD ["npm", "run", "start"]
</span></code></pre></div></div>

<ul>
  <li>FROM: 베이스 이미지
    <ul>
      <li>어느 이미지에서 시작할건지를 의미한다.</li>
      <li>기본 이미지를 <code class="language-plaintext highlighter-rouge">node 16</code> 버전을 사용한다는 의미이다.</li>
    </ul>
  </li>
  <li>WORKDIR: 컨테이너(이미지)의 작업 디렉토리를 지정한다.
    <ul>
      <li>작업 디렉토리를 지정하면 그 이후 명령어는 해당 디렉토리를 기준으로 동작한다.</li>
      <li><code class="language-plaintext highlighter-rouge">cd</code> 명령어와 동일하다.</li>
    </ul>
  </li>
  <li>COPY/ADD: build 명령 중간에 호스트의 파일 또는 폴더를 이미지에 가져오는(복사하는) 것이다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">ADD</code> 명령문은 좀 더 파워풀한 <code class="language-plaintext highlighter-rouge">COPY</code> 명령문이라고 생각할 수 있다.</li>
      <li><code class="language-plaintext highlighter-rouge">ADD</code> 명령문은 일반 파일 뿐만 아니라 압축 파일이나 네트워크 상의 파일도 사용할 수 있다.</li>
      <li>이렇게 특수한 파일을 다루는 게 아니라면 <code class="language-plaintext highlighter-rouge">COPY</code> 명령문을 사용하는 것이 권장된다.</li>
    </ul>
  </li>
  <li>RUN: 새로운 레이어에서 명령어를 실행하고, 새로운 이미지를 생성한다.</li>
  <li>EXPOSE: Dockerfile의 빌드로 생성된 이미지에서 열어줄 포트를 의미한다.
    <ul>
      <li>호스트 머신과 컨테이너의 포트 매핑시에 사용된다.</li>
      <li>컨테이너 생성 시 -p 옵션의 컨테이너 포트 값으로 EXPOSE 값을 적어야한다.</li>
    </ul>
  </li>
  <li>CMD: 컨테이너를 생성,실행 할 때 실행할 명령어
    <ul>
      <li><code class="language-plaintext highlighter-rouge">docker run</code> 명령으로 컨테이너를 생성하거나, <code class="language-plaintext highlighter-rouge">docker start</code> 명령으로 정지된 컨테이너를 시작할 때 실행된다.</li>
      <li>보통 컨테이너 내부에서 <code class="language-plaintext highlighter-rouge">항상 돌아가야하는 서버를 띄울 때</code> 사용한다.</li>
    </ul>
  </li>
</ul>

<p><br /></p>

<p>그럼 저 <code class="language-plaintext highlighter-rouge">Dockerfile</code>을 해석해보면 다음과 같다.</p>

<ul>
  <li>기본이미지를 node 16 버전으로 사용하겠다.
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">FROM node:16
</span></code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>컨테이너 작업 디렉토리는 /home/workspace을 기준으로 하겠다.
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">WORKDIR /home/workspace
</span></code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>Dockerfile이 있는 디렉토리의 모든 것을 복사하여 <code class="language-plaintext highlighter-rouge">WORKDIR</code>에 복사하겠다.</li>
  <li><code class="language-plaintext highlighter-rouge">.</code> 은 모든 것을 복사하겠다는 의미이다. 만약 특정 파일 및 디렉토리를 복사할꺼면 <code class="language-plaintext highlighter-rouge">copy.js</code>와 같이 명시해주면 된다.
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">COPY . ./
</span></code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>컨테이너 안에서 <code class="language-plaintext highlighter-rouge">npm install</code> 명령어를 실행하겠다.
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">RUN npm install
</span></code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>3000번 포트를 열어주겠다.
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">EXPOSE 3000
</span></code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<ul>
  <li>컨테이너가 실행될 때 <code class="language-plaintext highlighter-rouge">npm run start</code>명령어를 실행하겠다.
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">CMD ["npm", "run", "start"]
</span></code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<h2 id="dockerfile을-이미지로-빌드하기"><strong>Dockerfile을 이미지로 빌드하기</strong></h2>

<hr />

<ul>
  <li>빌드 명령어
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go"> docker build -t [이미지 이름:이미지 버전] [Dockerfile의 경로]
</span></code></pre></div>    </div>
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">docker build -t node_app_from_docker .
</span></code></pre></div>    </div>
  </li>
  <li>생성된 도커 이미지 확인
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">docker images
REPOSITORY             TAG                IMAGE ID       CREATED          SIZE
node_app_from_docker   latest             4dbe1e4ed445   33 seconds ago   958MB
</span></code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<h2 id="container-생성"><strong>Container 생성</strong></h2>

<hr />
<ul>
  <li><code class="language-plaintext highlighter-rouge">--name</code> : 컨테이너 이름</li>
  <li><code class="language-plaintext highlighter-rouge">-d</code> : 백그라운드 모드로 실행</li>
  <li><code class="language-plaintext highlighter-rouge">-p</code> : [호스트포트][컨테이너포트] 포트연결(외부-내부)</li>
  <li>마지막은 생성했던 이미지 이름
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">docker run --name=node_app_from_docker_container -d -p 8071:3000 node_app_from_docker
</span></code></pre></div>    </div>
  </li>
  <li>컨테이너 확인
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">docker ps -a
CONTAINER ID   IMAGE                  COMMAND                  CREATED          STATUS          PORTS                                                                                      NA
</span><span class="gp">eab42d556f2b   node_app_from_docker   "docker-entrypoint.s…"   14 seconds ago   Up 13 seconds   0.0.0.0:8071-&gt;</span>3000/tcp, :::8071-&gt;3000/tcp                                                  no
</code></pre></div>    </div>
  </li>
</ul>

<p><br /></p>

<h2 id="접속-확인"><strong>접속 확인</strong></h2>

<hr />

<p><code class="language-plaintext highlighter-rouge">ip</code>는 보안상 가렸다. 중요하건 컨테이너 생성시 설정했던 <code class="language-plaintext highlighter-rouge">8071 -&gt; 3000</code>으로 접속된다는 사실이다.</p>

<p>잘 접속되는 것을 확인할 수 있다.</p>

<p><img src="https://user-images.githubusercontent.com/52439201/155153299-efd36937-148a-4bdf-8993-483de48712fa.png" alt="image" /></p>
:ET